def registry = 'https://kmgayathri.jfrog.io'
def imageName = 'https://kmgayathri.jfrog.io/ttrenddocker-docker'
   def version   = '2.0.2'
pipeline {
    agent {
        node {
            label "slave"
        }
    }
    environment {
            PATH = "/opt/apache-maven-3.8.7/bin:$PATH"
    }
    stages {
        stage ("Clone the code") {
            steps {
                git branch: 'main', url: 'https://github.com/kmGayathri/twittertrend.git'
            }
        }
        stage ("Build the code") {
            steps {
                sh 'mvn clean install'
            }
        }
        stage ("SonarQube Analysis") {
            environment {
                scannerHome = tool 'Java_Sonarqube_Scanner'
            }
            steps {
                withSonarQubeEnv('Java_Sonarqube_Server') {
                      sh "${scannerHome}/bin/sonar-scanner"
                }
            } 
        }
        stage("Jar Publish") {
                steps {
                 script {
                     def server = Artifactory.newServer url:registry+"/artifactory" ,  credentialsId:"Jfrog-for-jenkins"
                     def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                     def uploadSpec = """{
                          "files": [
                            {
                              "pattern": "jarstaging/(*)",
                              "target": "twittertrend-libs-release-local/{1}",
                              "flat": "false",
                              "props" : "${properties}",
                              "exclusions": [ "*.sha1", "*.md5"]
                            }
                         ]
                     }"""
                     def buildInfo = server.upload(uploadSpec)
                     buildInfo.env.collect()
                     server.publishBuildInfo(buildInfo)  
                    }
                }   
           } 
           
            stage(" Docker Build ") {
             steps {
            script {
               
               app = docker.build(imageName+":"+version)
               
        }
      }
    }

            stage (" Docker Publish "){
            steps {
            script {
              
                docker.withRegistry(registry, 'Jfrog-for-jenkins'){
                    app.push()
                }    
           
            }
        }
    }
           
       }
    }   


        
